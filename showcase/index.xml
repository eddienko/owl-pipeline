<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pipelines on</title><link>https://eddienko.github.io/owl-pipeline/showcase/</link><description>Recent content in Pipelines on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://eddienko.github.io/owl-pipeline/showcase/index.xml" rel="self" type="application/rss+xml"/><item><title>Shell</title><link>https://eddienko.github.io/owl-pipeline/showcase/shell/</link><pubDate>Sun, 15 Aug 2021 20:55:31 +0100</pubDate><guid>https://eddienko.github.io/owl-pipeline/showcase/shell/</guid><description>Install curl -O https://raw.githubusercontent.com/eddienko/owl-shell-pipeline/main/shell_pipeline/signature.yaml owl admin pdef add signature.yaml Pipeline definition file The following pipeline definition file example executes a shell script in the cluster.
version: 1.2 name: shell command: | #!/bin/bash echo &amp;quot;hello&amp;quot; &amp;gt; hello sleep 600 cat hello # optional # use_dask: false # output directory (optional) # - sets the directory where the script is run # - stores pipeline logs # output: /storage/user/output resources: workers: 1 memory: 2 cores: 2 The command argument is anything that can be executed in a shell script, or indeed a Python script if the shebang line #!</description></item><item><title>Papermill</title><link>https://eddienko.github.io/owl-pipeline/showcase/papermill/</link><pubDate>Sun, 15 Aug 2021 20:55:31 +0100</pubDate><guid>https://eddienko.github.io/owl-pipeline/showcase/papermill/</guid><description>The papermill pipeline executes Jupyter notebooks using Papermill. Plase read the official documentation on how to paramaterize the notebooks.
An example pipeline definition file is below (and can be obtained typing owl pdef get papermill:
version: 1.2 # Name of the pipeline name: papermill input: /home/user/myDir output: /home/user/myDir notebook: notebook.ipynb paramaters: {} # use_dask: false resources: workers: 1 memory: 8 threads: 1 The pipeline requires the input and output directories and the name of the notebook to execute.</description></item><item><title>Example</title><link>https://eddienko.github.io/owl-pipeline/showcase/example/</link><pubDate>Sun, 15 Aug 2021 20:55:31 +0100</pubDate><guid>https://eddienko.github.io/owl-pipeline/showcase/example/</guid><description>Given a list of 1...n numbers does a series of operations in each of them and computes the result sum using Dask delayed adding random sleep times in each operation. The datalen argument is the length of the list.
Install curl -O https://raw.githubusercontent.com/eddienko/owl-example-pipeline/main/owl_example/signature.yml owl admin pdef add signature.yml Pipeline Definition File version: 1 # Name of the pipeline name: example # Pipeline arguments datalen: 100 # Resources requested resources: cores: 10 workers: 2 memory: 10</description></item><item><title>CITE-seq-Count</title><link>https://eddienko.github.io/owl-pipeline/showcase/citeseq/</link><pubDate>Sun, 15 Aug 2021 20:55:31 +0100</pubDate><guid>https://eddienko.github.io/owl-pipeline/showcase/citeseq/</guid><description>This pipeline wraps the CITE-seq-Count tool to run in Owl. Please follow the link to learn more about this tool.
Install curl -O https://raw.githubusercontent.com/eddienko/owl-cite-seq-count-pipeline/main/owl_cite_seq_count/cite-seq-count.yml owl admin pdef add cite-seq-count.yml Pipeline Definition File The pipeline definition file is:
# Version of the configuration file version: 1 # Name of the pipeline name: cite_seq_count # Pipeline arguments # Read1 fastq file location in fastq.gz format. # Read 1 typically contains Cell barcode and UMI read1: /storage/admin/cite/5kPBMC/big_R1.</description></item><item><title>Cell Ranger</title><link>https://eddienko.github.io/owl-pipeline/showcase/cellranger/</link><pubDate>Sun, 15 Aug 2021 20:55:31 +0100</pubDate><guid>https://eddienko.github.io/owl-pipeline/showcase/cellranger/</guid><description>Cell Ranger is a set of analysis pipelines that process Chromium single-cell data to align reads, generate feature-barcode matrices, perform clustering and other secondary analysis, and more.
Currently we implement the cellranger count method that takes FASTQ files from and performs alignment, filtering, barcode counting, and UMI counting. It uses the Chromium cellular barcodes to generate feature-barcode matrices, determine clusters, and perform gene expression analysis.
Requirements The Cell Ranger software and reference data must be available to the pipeline in a mounted volume.</description></item></channel></rss>