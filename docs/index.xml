<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on</title><link>https://eddienko.github.io/owl-pipeline/docs/</link><description>Recent content in Docs on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://eddienko.github.io/owl-pipeline/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Install</title><link>https://eddienko.github.io/owl-pipeline/docs/server/install/</link><pubDate>Sun, 15 Aug 2021 16:56:40 +0100</pubDate><guid>https://eddienko.github.io/owl-pipeline/docs/server/install/</guid><description>info Throughout this documentation we assume that you have a Kubernetes cluster already spin up and the control panel is reachable using command line tools. Helm 3 is used. Add the Helm repository If you have not done so, install Helm. Then add the repository that contains the Owl chart:
helm repo add owl https://eddienko.github.io/owl-pipeline-server/
helm repo update
Install the chart The Owl chart bootstraps the Owl Scheduler on Kubernetes using the Helm package manager.</description></item><item><title>Configuration</title><link>https://eddienko.github.io/owl-pipeline/docs/server/configuration/</link><pubDate>Sun, 15 Aug 2021 16:56:40 +0100</pubDate><guid>https://eddienko.github.io/owl-pipeline/docs/server/configuration/</guid><description>Admin password On the first launch the database schema is created and a defaul random admin password created. You can recover the default password using:
POD_NAME=$(kubectl get pods --namespace owl -l &amp;quot;app.kubernetes.io/name=owl-scheduler,app.kubernetes.io/instance=owl&amp;quot; -o jsonpath=&amp;quot;{.items[0].metadata.name}&amp;quot;)
ADMIN_PASSWORD=$(kubectl exec $POD_NAME -- cat /var/run/owl/adminPassword)
echo $ADMIN_PASSWORD
Command line Pod Run a Owl Client command line Pod in the server or install the Owl Client for remote access (this assumes the API is available remotely).</description></item><item><title>Storage</title><link>https://eddienko.github.io/owl-pipeline/docs/server/storage/</link><pubDate>Sun, 15 Aug 2021 16:56:40 +0100</pubDate><guid>https://eddienko.github.io/owl-pipeline/docs/server/storage/</guid><description>Scheduler By default a PVC is created that stores the SQLite database and logs from the pipelines. This is mounted in /var/run/owl.
TBD.
Pipeline jobs TBD.</description></item><item><title>Advanced</title><link>https://eddienko.github.io/owl-pipeline/docs/server/advanced/</link><pubDate>Sun, 15 Aug 2021 16:56:40 +0100</pubDate><guid>https://eddienko.github.io/owl-pipeline/docs/server/advanced/</guid><description>External user database TBD. It is possible to have the user database managed by an external application, e.g. a Django site.
Custom Docker image for pipelines As part of the resources section of the pipeline definition file it is possible to specify a custom Docker image, e.g.:
resources:
threads: 10
workers: 2
memory: 10
image: myrepo/customimage:tag</description></item><item><title>Troubleshooting</title><link>https://eddienko.github.io/owl-pipeline/docs/server/troubleshoot/</link><pubDate>Sun, 15 Aug 2021 16:56:40 +0100</pubDate><guid>https://eddienko.github.io/owl-pipeline/docs/server/troubleshoot/</guid><description/></item><item><title>Owl Pipelines</title><link>https://eddienko.github.io/owl-pipeline/docs/pipelines/pipelines/</link><pubDate>Sun, 15 Aug 2021 21:00:06 +0100</pubDate><guid>https://eddienko.github.io/owl-pipeline/docs/pipelines/pipelines/</guid><description>Owl pipelines are pip installable Python packages. In order to submit a pipeline to the system, the admin must have activated it and you need a pipeline definition file (PDeF). This is a YAML file that contains the name of the pipeline, its arguments and requested resources.
Currently there are three general purpose pipelines available.
Example Pipeline This is just a pipeline that uses Dask to run some dummy computations and can be used for general testing and as a template for writing more complicated pipelines.</description></item><item><title>Pipeline Signatures</title><link>https://eddienko.github.io/owl-pipeline/docs/pipelines/signatures/</link><pubDate>Sun, 15 Aug 2021 20:55:31 +0100</pubDate><guid>https://eddienko.github.io/owl-pipeline/docs/pipelines/signatures/</guid><description>Pipelines are Python packages installable using pip, i.e. they can uploaded to PyPi or to a private repository. In order for the server to run a pipeline this needs to be defined as active in the system. Otherwise any pip installable package with the correct entrypoint could be run in the system posing a security risk. For this we define pipeline definition signatures.
The pipeline definition signatures that are used with the admin pdef commands (see Admin commands) are slightly different to the pipeline definition files used to submit a pipeline.</description></item><item><title>Development Guide</title><link>https://eddienko.github.io/owl-pipeline/docs/pipelines/development/</link><pubDate>Sun, 15 Aug 2021 20:55:31 +0100</pubDate><guid>https://eddienko.github.io/owl-pipeline/docs/pipelines/development/</guid><description>Owl pipelines are pip installable Python packages. This page shows how to develop a custom pipeline. The example pipeline is a good starting point. The directory structure is similar to any Python package.
.
├── LICENSE
├── README.rst
├── requirements_dev.txt
├── setup.cfg
├── setup.py
├── conf
│ └── example.yml
├── doc
│ ├── Makefile
│ ├── _static
│ │ └── readme
│ ├── _templates
│ │ └── readme
│ ├── conf.</description></item></channel></rss>